{"ast":null,"code":"import { swap } from \"./helper\";\n\nconst selection = (array, position, arraySteps, colorSteps) => {\n  let colorKey = colorSteps[colorSteps.length - 1].slice();\n\n  for (let i = 0; i < array.length - 1; i++) {\n    let min_index = i;\n\n    for (let j = i + 1; j < array.length; j++) {\n      if (array[j] < array[min_index]) {\n        min_index = j;\n      }\n\n      colorKey[min_index] = 1;\n      colorKey[j] = 1;\n      arraySteps.push(array.slice());\n      colorSteps.push(colorKey.slice());\n      colorKey[min_index] = 0;\n      colorKey[j] = 0;\n    }\n\n    swap(array, min_index, i);\n    colorKey[i] = 2;\n    arraySteps.push(array.slice());\n    colorSteps.push(colorKey.slice());\n  }\n\n  colorSteps[colorSteps.length - 1] = new Array(array.length).fill(2);\n};\n\nexport default selection;","map":{"version":3,"sources":["E:/sorting algorithm vizualizer/src/algorithms/Selection.js"],"names":["swap","selection","array","position","arraySteps","colorSteps","colorKey","length","slice","i","min_index","j","push","Array","fill"],"mappings":"AAAA,SAASA,IAAT,QAAqB,UAArB;;AAEA,MAAMC,SAAS,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,UAAlB,EAA8BC,UAA9B,KAA6C;AAC7D,MAAIC,QAAQ,GAAGD,UAAU,CAACA,UAAU,CAACE,MAAX,GAAoB,CAArB,CAAV,CAAkCC,KAAlC,EAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAAK,CAACK,MAAN,GAAe,CAAnC,EAAsCE,CAAC,EAAvC,EAA2C;AACzC,QAAIC,SAAS,GAAGD,CAAhB;;AACA,SAAK,IAAIE,CAAC,GAAGF,CAAC,GAAG,CAAjB,EAAoBE,CAAC,GAAGT,KAAK,CAACK,MAA9B,EAAsCI,CAAC,EAAvC,EAA2C;AACzC,UAAIT,KAAK,CAACS,CAAD,CAAL,GAAWT,KAAK,CAACQ,SAAD,CAApB,EAAiC;AAC/BA,QAAAA,SAAS,GAAGC,CAAZ;AACD;;AACDL,MAAAA,QAAQ,CAACI,SAAD,CAAR,GAAsB,CAAtB;AACAJ,MAAAA,QAAQ,CAACK,CAAD,CAAR,GAAc,CAAd;AACAP,MAAAA,UAAU,CAACQ,IAAX,CAAgBV,KAAK,CAACM,KAAN,EAAhB;AACAH,MAAAA,UAAU,CAACO,IAAX,CAAgBN,QAAQ,CAACE,KAAT,EAAhB;AACAF,MAAAA,QAAQ,CAACI,SAAD,CAAR,GAAsB,CAAtB;AACAJ,MAAAA,QAAQ,CAACK,CAAD,CAAR,GAAc,CAAd;AACD;;AACDX,IAAAA,IAAI,CAACE,KAAD,EAAQQ,SAAR,EAAmBD,CAAnB,CAAJ;AACAH,IAAAA,QAAQ,CAACG,CAAD,CAAR,GAAc,CAAd;AACAL,IAAAA,UAAU,CAACQ,IAAX,CAAgBV,KAAK,CAACM,KAAN,EAAhB;AACAH,IAAAA,UAAU,CAACO,IAAX,CAAgBN,QAAQ,CAACE,KAAT,EAAhB;AACD;;AACDH,EAAAA,UAAU,CAACA,UAAU,CAACE,MAAX,GAAoB,CAArB,CAAV,GAAoC,IAAIM,KAAJ,CAAUX,KAAK,CAACK,MAAhB,EAAwBO,IAAxB,CAA6B,CAA7B,CAApC;AACD,CArBD;;AAuBA,eAAeb,SAAf","sourcesContent":["import { swap } from \"./helper\";\r\n\r\nconst selection = (array, position, arraySteps, colorSteps) => {\r\n  let colorKey = colorSteps[colorSteps.length - 1].slice();\r\n  for (let i = 0; i < array.length - 1; i++) {\r\n    let min_index = i;\r\n    for (let j = i + 1; j < array.length; j++) {\r\n      if (array[j] < array[min_index]) {\r\n        min_index = j;\r\n      }\r\n      colorKey[min_index] = 1;\r\n      colorKey[j] = 1;\r\n      arraySteps.push(array.slice());\r\n      colorSteps.push(colorKey.slice());\r\n      colorKey[min_index] = 0;\r\n      colorKey[j] = 0;\r\n    }\r\n    swap(array, min_index, i);\r\n    colorKey[i] = 2;\r\n    arraySteps.push(array.slice());\r\n    colorSteps.push(colorKey.slice());\r\n  }\r\n  colorSteps[colorSteps.length - 1] = new Array(array.length).fill(2);\r\n};\r\n\r\nexport default selection;\r\n"]},"metadata":{},"sourceType":"module"}